{
    "translation-hash-fkezp6": "# Bienvenido a Aprende Python\n\n![Lenguaje de programación Python](https://storage.googleapis.com/qvault-webapp-dynamic-assets/course_assets/UbgRs9O-800x200.png)\n\n## Construyamos un Juego\n\nDurante este curso construirás funciones para un RPG basado en texto llamado \"Fantasy Quest\".\n\n## Tarea\n\n<!-- prettier-ignore-start -->\n> [!mobile]\n> _Estás en móvil (qué asco), así que necesitarás usar el interruptor `lesson/code` de arriba para moverte entre la lección y el código_.\n<!-- prettier-ignore-end -->\n\n1. Presiona el botón gris `▶ Run` para ejecutar el código que escribí para ti\n2. Presiona el botón dorado `▶ Submit` para ejecutar _y enviar_ el código\n\n> [!desktop]\n> Presiona la flecha derecha `-->` en la esquina superior derecha de la pantalla para ir a la siguiente lección.",
    "translation-hash-teitrb": "# Corrige tu primer error\n\n¡El sistema de combate en Fantasy Quest no está funcionando como debería! Parece que los jugadores _ganan_ salud cuando son atacados en lugar de _perderla_.\n\n## Tarea\n\nCorrige el error matemático en la línea 3.",
    "translation-hash--w9yog2": "# La Consola\n\nLa \"consola\" te muestra la salida de texto de tu programa. Está justo debajo del editor de código.\n\nPara ver lo que sucede en nuestro código, necesitamos _imprimirlo en la consola_ usando la función `print()`.\n\nAprenderemos más sobre funciones más adelante, pero por ahora, solo debes saber que la función `print()` imprimirá cualquier cosa que coloques dentro de sus paréntesis, así:\n\n```python\nprint(\"¡Saludos, aventurero!\")\n```\n\n## Tarea\n\n¡Necesitamos decirles a nuestros nuevos jugadores cómo moverse! **Imprime el siguiente texto** en la consola:\n\n```\nPlease move forward\n```",
    "translation-hash--9y1prc": "# Estadísticas del Juego\n\nEl equipo de marketing está pidiendo algunas estadísticas sobre nuestros servidores del juego Fantasy Quest. Les gustaría saber el número promedio de jugadores en nuestros 4 servidores.\n\n## Tarea\n\nDepura el código para que imprima correctamente la solución al problema matemático.\n\n> [!tip]\n> La sintaxis está mal. ¿Por qué está tratando los números como palabras?\n\n## Tip\n\n¡Las cadenas llevan comillas, pero los enteros no!",
    "translation-hash--7xn70o": "# Respuesta de la Tienda\n\nNuestro equipo de desarrollo ha estado haciendo actualizaciones a la tienda del posadero de Fantasy Quest, ¡pero hay un problema! ¡El diálogo del posadero está en blanco!\n\n## Tarea\n\nAgrega 2 declaraciones `print` separadas para completar la respuesta del posadero. Deben mostrar lo siguiente en la consola _en ese orden_:\n\n- `The Innkeeper: Ah! Great choices...`\n- `The Innkeeper: Is there anything else I can help you with?`",
    "translation-hash-syzull": "# Múltiples instrucciones\n\nEl código se ejecuta en orden, comenzando desde la parte superior del programa. Por ejemplo:\n\n```py\nprint(\"esto se imprime primero\")\nprint(\"esto se imprime segundo\")\nprint(\"esto se imprime al final\")\n```\n\nCada instrucción `print()` se muestra en una línea nueva.\n\n## Tarea\n\n¡El diálogo de nuestro juego debe mostrarse en el orden correcto! En el primer nivel, nuestro héroe se encuentra con un búho parlante llamado Jax.\n\n1. [ ] _Ejecuta_ (no envíes) el código y observa que se imprime en el orden incorrecto\n2. [ ] Reordena el código para que se imprima en el siguiente orden (correcto):\n\n```\nJax: ¡B-Kaw!\nHero: ...\nJax: ¿A dónde vas esta mañana? Bkaw...\nHero: ¿Dónde aprendió a hablar un búho??\n```",
    "translation-hash-rlshls": "# ¿Qué es Python?\n\n![por qué aprender python](https://storage.googleapis.com/qvault-webapp-dynamic-assets/lesson_videos/why-learn-python-45454.mp4)\n\nCientos de miles de estudiantes comienzan su viaje en la programación justo aquí con [Python](https://www.python.org/).\n\n> [!lane]\n> Python _no tiene_ que ser tu primer lenguaje, pero _yo_ creo que es el mejor primer lenguaje para la mayoría de los desarrolladores. Se aparta de tu camino para que puedas concentrarte en aprender conceptos fundamentales de programación.\n\n¡Pero solo porque Python es simple no significa que no sea útil! Python es un lenguaje [_extremadamente_ popular](https://survey.stackoverflow.co/2024/technology) en la industria, y es muy conocido por:\n\n- Servidores web backend\n- DevOps e ingeniería en la nube\n- Aprendizaje automático\n- Scripts y automatización\n- etc...\n\nPor otro lado, _no_ es conocido por el **desarrollo frontend** o interfaces gráficas de usuario. Es _posible_, pero no común.",
    "translation-hash--yyou3c": "# Errores de Sintaxis\n\n[\"Sintaxis\"](<https://en.wikipedia.org/wiki/Syntax_(programming_languages)>) es la jerga para \"código válido que la computadora puede entender\". Por ejemplo, el siguiente código tiene sintaxis _inválida_:\n\n```py\nprint(\"hello world')\n```\n\nTiene comillas desiguales alrededor de la cadena `hello world`. Una es una comilla simple `'` y la otra es una comilla doble `\"`.\n\n## Tarea\n\nContinuemos nuestro trabajo en Fantasy Quest. Hay un error en nuestro juego y nuestros jugadores están _angustiados_.\n\n> [!lane]\n> Son tan necesitados... no es como si hubiéramos añadido microtransacciones...\n\nEl código debería imprimir `¡Bienvenido a Fantasy Quest!` para nuestros usuarios, pero en su lugar obtienen un error. **Encuentra el error de sintaxis en el editor de código y corrígelo**.",
    "translation-hash-nl3lkh": "# Cuestionario de Errores de Sintaxis\n\n**Sintaxis**: Las reglas que determinan cómo deben estructurarse las [expresiones](<https://en.wikipedia.org/wiki/Expression_(computer_science)>) y las [sentencias](<https://en.wikipedia.org/wiki/Statement_(computer_science)>) en un lenguaje. Por ejemplo, en Python, la siguiente sintaxis es _correcta_:\n\n```py\nprint(\"hola mundo\")\n```\n\nMientras que en otro lenguaje de programación, como Go, la sintaxis correcta sería:\n\n```go\nfmt.Println(\"hola mundo\")\n```\n\nLos errores de sintaxis no son los _únicos_ problemas que puedes encontrar al programar, por ejemplo:\n\n- **Un error en tu lógica**. Tu código es _válido_ y _se ejecuta_, pero hace algo inesperado.\n- **Es demasiado lento**. Tu código es _válido_ y hace _lo que se espera_, pero lo hace lentamente.\n\n_En este curso solo nos ocuparemos de los errores de sintaxis y lógica. Trataremos los problemas de rendimiento en un curso posterior_.",
    "translation-hash--p9t0tz": "{\"Question\":\"¿Para qué no se utiliza realmente Python?\",\"Answers\":[\"Aprendizaje automático\",\"Aplicaciones frontend\",\"Servidores backend\",\"Scripts de automatización\"],\"Answer\":\"Aplicaciones frontend\",\"ContainsCompleteDir\":false}",
    "Aprendizaje automático": "Machine learning",
    "Aplicaciones frontend": "Frontend apps",
    "Servidores backend": "Backend servers",
    "Scripts de automatización": "Automation scripts",
    "translation-hash-yhtx20": "# ¿Qué es el \"código\"?\n\nEl código es simplemente una serie de instrucciones que la computadora sigue una tras otra. Los programas pueden tener _muchas_ instrucciones.\n\n> [!lane]\n> El backend de Boot.dev tiene 46,119 líneas de código mientras escribo esto... y es mucho más pequeño que algunos otros proyectos en los que he trabajado.\n\nRecuerda que usamos la instrucción `print()` para mostrar texto en la consola. También podemos usarla para mostrar números. Esto imprime el número `42`:\n\n```py\nprint(42)\n```\n\nBueno, la [suma](https://es.wikipedia.org/wiki/Suma) es una de las instrucciones más comunes en programación. Esto _también_ imprime el número `42`:\n\n```py\nprint(40 + 2)\n```\n\nPrimero calcula la suma dentro de los paréntesis y _luego_ imprime el resultado.\n\n## Tarea\n\nLa suma simple se usa _todo el tiempo_ en el desarrollo de videojuegos. En Fantasy Quest, queremos que las armas hagan daño adicional cuando están encantadas.\n\nLa espada de nuestro héroe hace `250` de daño normalmente, pero debería hacer `75` de daño _adicional_ cuando está encantada.\n\n**Calcula e imprime el resultado de `250 + 75`**",
    "translation-hash-yombne": "{\"Question\":\"Python es conocido por ser...\",\"Answers\":[\"simple de leer y escribir\",\"complejo de leer y escribir\"],\"Answer\":\"simple de leer y escribir\",\"ContainsCompleteDir\":false}",
    "simple de leer y escribir": "simple to read and write",
    "complejo de leer y escribir": "complex to read and write",
    "translation-hash--gqd3yv": "{\"Question\":\"¿Qué significa sintaxis?\",\"Answers\":[\"Las reglas para un código válido en un lenguaje de programación\",\"Código rápido\",\"Código que produce la salida correcta\",\"Código en el navegador\"],\"Answer\":\"Las reglas para un código válido en un lenguaje de programación\",\"ContainsCompleteDir\":false}",
    "Las reglas para un código válido en un lenguaje de programación": "The rules for valid code in a programming language",
    "Código rápido": "Fast code",
    "Código que produce la salida correcta": "Code that produces the correct output",
    "Código en el navegador": "Code in the browser",
    "translation-hash--b4wvq": "{\"Question\":\"¿Qué ocurre si intentas ejecutar código con sintaxis inválida?\",\"Answers\":[\"Se caerá tu conexión de red\",\"Tus sueños se marchitarán y morirán, junto con tus últimas esperanzas y aspiraciones\",\"Recibirás un mensaje de error del intérprete de Python y el código no se ejecutará\",\"El computador se congelará\"],\"Answer\":\"Recibirás un mensaje de error del intérprete de Python y el código no se ejecutará\",\"ContainsCompleteDir\":false}",
    "Se caerá tu conexión de red": "Your network connection will drop",
    "Tus sueños se marchitarán y morirán, junto con tus últimas esperanzas y aspiraciones": "Your dreams will wither and die, alongside your last few hopes and aspirations",
    "Recibirás un mensaje de error del intérprete de Python y el código no se ejecutará": "You'll get an error message from the Python interpreter and the code won't execute",
    "El computador se congelará": "The computer will freeze",
    "translation-hash--7rzgq2": "# Lección Fallida\n\nProbablemente hayas notado que tienes un botón `Ejecutar` _y_ un botón `Enviar`.\n\n- **Ejecutar**: Para pruebas y depuración. No hay penalización por ejecutar tu código.\n- **Enviar**: Ejecuta tu código, pero también verifica su salida contra nuestra clave de respuestas. Si la salida no coincide, serás _castigado_.\n\n> [!lane]\n> Consejo profesional: ¿No implementarías código en usuarios finales sin probarlo... verdad? ¡Así que no envíes código sin ejecutarlo primero! El objetivo de esta mecánica de juego es fomentar buenas prácticas de codificación del mundo real. \"Enviar\" es como implementar en producción.\n\n## ¿Cuál es la penalización?\n\nCuando fallas una lección, una de dos cosas sucederá:\n\n- **Si tienes [armadura](?modal=info-sharpshooter)**, perderás una. Esa armadura se consume para protegerte de fallas futuras _en esa lección_.\n- **Si no tienes armadura**, perderás tu [racha de tirador experto](?modal=info-sharpshooter), y se reiniciará a cero. Cada vez que tu contador de racha alcance 15, ganarás un cofre aleatorio. Los cofres contienen gemas y objetos (como armadura).\n\n## Tarea\n\nFantasy Quest tiene un error en su código del servidor. El código debería imprimir mensajes que indiquen que el servidor del juego se ha iniciado correctamente.\n\n**Corrige ambos errores de sintaxis en el código**.",
    "translation-hash-d65fc8": "# Las Variables Varían\n\nA las variables se les llama \"variables\" porque pueden contener cualquier valor y ese valor puede cambiar (varía).\n\nPor ejemplo, este código imprime `20`:\n\n```py\nacceleration = 10\nacceleration = 20\nprint(acceleration)\n```\n\nLa línea `acceleration = 20` _reasigna_ el valor de `acceleration` a 20. _Sobrescribe_ cualquier valor que se estuviera guardando en la variable `acceleration` antes (en este caso, 10).\n\n## Asignación\n\nNecesitamos reducir la salud de nuestro héroe a medida que recibe daño.\n\nAntes de cada función `print()` en el código proporcionado, cambia el valor de `player_health` a 100 _menos_ de lo que era antes.\n\nLa salida final debería verse así:\n\n```\n900\n800\n700\n600\n```"
}