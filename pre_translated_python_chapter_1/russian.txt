{
    "translation-hash-fkezp6": "# Добро пожаловать в Learn Python\n\n![Язык программирования Python](https://storage.googleapis.com/qvault-webapp-dynamic-assets/course_assets/UbgRs9O-800x200.png)\n\n## Давайте создадим игру\n\nВ течение этого курса вы будете реализовывать функции для текстовой RPG под названием «Fantasy Quest».\n\n## Задание\n\n<!-- prettier-ignore-start -->\n> [!mobile]\n> _Вы на мобильном (фу), поэтому вам нужно использовать переключатель `lesson/code` выше, чтобы переключаться между уроком и кодом_.\n<!-- prettier-ignore-end -->\n\n1. Нажмите серую кнопку `▶ Run`, чтобы запустить код, который я написал для вас\n2. Нажмите золотую кнопку `▶ Submit`, чтобы запустить _и отправить_ код\n\n> [!desktop]\n> Нажмите стрелку `-->` в правом верхнем углу экрана, чтобы перейти к следующему уроку.",
    "translation-hash-teitrb": "# Исправьте свою первую ошибку\n\nБоевая система в Fantasy Quest работает не так, как задумано! Похоже, игроки _получают_ здоровье при атаке вместо того, чтобы _терять_ его.\n\n## Задание\n\nИсправьте математическую ошибку в строке 3.",
    "translation-hash--gqd3yv": "{\"Question\":\"Что означает синтаксис?\",\"Answers\":[\"Правила написания корректного кода в языке программирования\",\"Быстрый код\",\"Код, который выдаёт правильный результат\",\"Код в браузере\"],\"Answer\":\"Правила написания корректного кода в языке программирования\",\"ContainsCompleteDir\":false}",
    "Правила написания корректного кода в языке программирования": "The rules for valid code in a programming language",
    "Быстрый код": "Fast code",
    "Код, который выдаёт правильный результат": "Code that produces the correct output",
    "Код в браузере": "Code in the browser",
    "translation-hash--w9yog2": "# Консоль\n\n«Консоль» показывает текстовый вывод вашей программы. Она находится прямо под редактором кода.\n\nЧтобы видеть, что происходит в нашем коде, нужно _вывести это в консоль_ с помощью функции `print()`.\n\nПозже мы подробнее изучим функции, а пока просто запомните: функция `print()` выведет всё, что вы поместите внутрь её круглых скобок, например:\n\n```python\nprint(\"Greetings, adventurer!\")\n```\n\n## Задание\n\nНам нужно рассказать новым игрокам, как двигаться! **Выведите в консоль** следующий текст:\n\n```\nPlease move forward\n```",
    "translation-hash-syzull": "# Несколько инструкций\n\nКод выполняется по порядку, начиная сверху программы. Например:\n\n```py\nprint(\"это выведется первым\")\nprint(\"это выведется вторым\")\nprint(\"это выведется последним\")\n```\n\nКаждая инструкция `print()` выводится на новой строке.\n\n## Задание\n\nДиалог в нашей игре должен отображаться в правильном порядке! На первом уровне наш герой встречает говорящую сову по имени Джакс.\n\n1. [ ] _Запустите_ (не отправляйте) код и убедитесь, что он выводится в неправильном порядке\n2. [ ] Переставьте строки кода так, чтобы они выводились в следующем (правильном) порядке:\n\n```\nJax: B-Kaw!\nHero: ...\nJax: Where are you off to this morning? Bkaw...\nHero: Where did an owl learn to speak??\n```",
    "translation-hash--yyou3c": "# Синтаксические ошибки\n\n[\"Синтаксис\"](<https://en.wikipedia.org/wiki/Syntax_(programming_languages)>) — это жаргон для «корректного кода, который компьютер может понять». Например, следующий код имеет _неверный_ синтаксис:\n\n```py\nprint(\"hello world')\n```\n\nЗдесь не совпадают кавычки вокруг строки `hello world`. Одна — одинарная `'`, другая — двойная `\"`.\n\n## Задание\n\nПродолжим работу над Fantasy Quest. В нашей игре есть баг, и игроки в _отчаянии_.\n\n> [!lane]\n> Какие они требовательные… будто мы добавили микротранзакции…\n\nКод должен был выводить `Welcome to Fantasy Quest!`, но вместо этого игроки получают ошибку. **Найдите синтаксическую ошибку в редакторе кода и исправьте её**.",
    "translation-hash-rlshls": "# Что такое Python?\n\n![why learn python](https://storage.googleapis.com/qvault-webapp-dynamic-assets/lesson_videos/why-learn-python-45454.mp4)\n\nСотни тысяч студентов начинают свой путь в программировании именно здесь, с [Python](https://www.python.org/).\n\n> [!lane]\n> Python _не обязан_ быть вашим первым языком, но _я_ считаю его лучшим первым языком для большинства разработчиков. Он не мешает вам, позволяя сосредоточиться на изучении фундаментальных концепций программирования.\n\nНо простота Python не делает его бесполезным! Python — [_чрезвычайно популярный_](https://survey.stackoverflow.co/2024/technology) язык в индустрии и хорошо известен благодаря:\n\n- Серверной разработке веб-приложений\n- DevOps и облачной инженерии\n- Машинному обучению\n- Скриптам и автоматизации\n- и т.д...\n\nС другой стороны, он _не известен_ **фронтенд-разработкой** или графическими интерфейсами. Это _возможно_, но не распространено.",
    "translation-hash-nl3lkh": "# Викторина по синтаксическим ошибкам\n\n**Синтаксис**: правила, по которым должны строиться [выражения](<https://en.wikipedia.org/wiki/Expression_(computer_science)>) и [инструкции](<https://en.wikipedia.org/wiki/Statement_(computer_science)>) в языке. Например, в Python следующий код имеет _правильный_ синтаксис:\n\n```py\nprint(\"hello world\")\n```\n\nВ другом языке программирования, например Go, правильный синтаксис будет таким:\n\n```go\nfmt.Println(\"hello world\")\n```\n\nСинтаксические ошибки — это не единственные проблемы, с которыми можно столкнуться при написании кода, например:\n\n- **Ошибка в логике**. Код _корректен_ и _выполняется_, но делает не то, что ожидается.\n- **Слишком медленно**. Код _корректен_ и делает _то, что нужно_, но делает это медленно.\n\n_В этом курсе нас интересуют только синтаксические и логические ошибки. Вопросы производительности мы рассмотрим в следующем курсе_.",
    "translation-hash--7rzgq2": "# Урок Провал\n\nВы, вероятно, заметили, что у вас есть кнопки `Submit` _и_ `Run`.\n\n- **Run**: Для тестирования и отладки. За запуск кода штрафа нет.\n- **Submit**: Запускает код, но также сверяет его вывод с нашим эталонным ответом. Если вывод не совпадает, вас _накажут_.\n\n> [!lane]\n> Совет профи: вы бы не выкладывали код конечным пользователям без тестирования... верно? Тогда не отправляйте код без предварительного запуска! Цель этого игрового механизма — поощрять хорошие практики реального программирования. «Submit» — это как деплой в продакшен.\n\n## Какой штраф?\n\nКогда вы проваливаете урок, происходит одно из двух:\n\n- **Если у вас есть [броня](?modal=info-sharpshooter)**, вы потеряете одну. Эта броня расходуется, чтобы защитить вас от будущих провалов _в этом уроке_.\n- **Если брони нет**, вы потеряете свою [серию меткого стрелка](?modal=info-sharpshooter), и она сбросится до нуля. Каждый раз, когда счётчик серии достигает 15, вы получаете случайный сундук. В сундуках — самоцветы и предметы (например, броня).\n\n## Задание\n\nВ серверном коде Fantasy Quest есть баг. Код должен выводить сообщения о том, что игровой сервер успешно запущен.\n\n**Исправьте обе синтаксические ошибки в коде**.",
    "translation-hash-yombne": "{\"Question\":\"Python известен тем, что он...\",\"Answers\":[\"прост в чтении и написании\",\"сложен в чтении и написании\"],\"Answer\":\"прост в чтении и написании\",\"ContainsCompleteDir\":false}",
    "прост в чтении и написании": "simple to read and write",
    "сложен в чтении и написании": "complex to read and write",
    "translation-hash--p9t0tz": "{\"Question\":\"Для чего Python на самом деле не используется?\",\"Answers\":[\"Машинное обучение\",\"Фронтенд-приложения\",\"Бэкенд-серверы\",\"Скрипты автоматизации\"],\"Answer\":\"Фронтенд-приложения\",\"ContainsCompleteDir\":false}",
    "Машинное обучение": "Machine learning",
    "Фронтенд-приложения": "Frontend apps",
    "Бэкенд-серверы": "Backend servers",
    "Скрипты автоматизации": "Automation scripts",
    "translation-hash-yhtx20": "# Что такое «код»?\n\nКод — это просто последовательность инструкций, которые компьютер выполняет одну за другой. В программах может быть _очень много_ инструкций.\n\n> [!lane]\n> На момент написания этой статьи бэкенд Boot.dev содержит 46 119 строк кода… и это гораздо меньше, чем в некоторых других проектах, над которыми я работал.\n\nПомните, как мы использовали инструкцию `print()`, чтобы вывести текст в консоль? Мы также можем использовать её для вывода чисел. Этот код выводит число `42`:\n\n```py\nprint(42)\n```\n\n[Сложение](https://en.wikipedia.org/wiki/Addition) — одна из самых распространённых инструкций в программировании. Этот код _также_ выводит число `42`:\n\n```py\nprint(40 + 2)\n```\n\nСначала вычисляется сумма внутри скобок, а _затем_ выводится результат.\n\n## Задание\n\nПростое сложение используется _постоянно_ в разработке игр. В Fantasy Quest мы хотим, чтобы оружие наносило бонусный урон, когда оно зачаровано.\n\nМеч нашего героя обычно наносит `250` единиц урона, но должен наносить _дополнительно_ `75` единиц урона, когда зачарован.\n\n**Вычислите и выведите результат выражения `250 + 75`**",
    "translation-hash--b4wvq": "{\"Question\":\"Что произойдёт, если вы попытаетесь запустить код с недопустимым синтаксисом?\",\"Answers\":[\"Ваше сетевое соединение прервётся\",\"Ваши мечты увянут и умрут вместе с последними надеждами и стремлениями\",\"Вы получите сообщение об ошибке от интерпретатора Python, и код не выполнится\",\"Компьютер зависнет\"],\"Answer\":\"Вы получите сообщение об ошибке от интерпретатора Python, и код не выполнится\",\"ContainsCompleteDir\":false}",
    "Ваше сетевое соединение прервётся": "Your network connection will drop",
    "Ваши мечты увянут и умрут вместе с последними надеждами и стремлениями": "Your dreams will wither and die, alongside your last few hopes and aspirations",
    "Вы получите сообщение об ошибке от интерпретатора Python, и код не выполнится": "You'll get an error message from the Python interpreter and the code won't execute",
    "Компьютер зависнет": "The computer will freeze",
    "translation-hash-jbosst": "# Переменные\n\n[Переменные](https://www.cs.utah.edu/~germain/PPS/Topics/variables.html) — это способ _хранить_ данные во время выполнения программы. До сих пор мы просто _выводили_ данные, передавая их напрямую в [`print()`](https://docs.python.org/3/library/functions.html#print). Теперь мы будем _сохранять_ данные в переменных, чтобы потом переиспользовать и изменять их _до_ вывода на экран.\n\n## Создание переменных\n\n«Переменная» — это просто имя, которое мы присваиваем значению. Например, можно создать новую переменную с именем `my_height` и присвоить ей значение `100`:\n\n```py\nmy_height = 100\n```\n\nИли определить переменную `my_name` и установить её равной строке `\"Lane\"`:\n\n```py\nmy_name = \"Lane\"\n```\n\nМы свободны в выборе имён переменных, но они должны быть _описательными_ и состоять из одного [\"токена\"](https://en.wikipedia.org/wiki/Lexical_analysis#Token), то есть непрерывного текста со словами, разделёнными символами подчёркивания.\n\n## Использование переменных\n\nКак только переменная создана, мы можем получить её значение, используя её имя. Например, следующий код выведет `100`:\n\n```py\nprint(my_height)\n```\n\nА этот выведет `Lane`:\n\n```py\nprint(my_name)\n```\n\n## Задание\n\nНам нужно отслеживать здоровье нашего героя!\n\nВ первой строке кода создайте новую переменную с именем `player_health` и установите её равной `1000`.",
    "translation-hash--7xn70o": "# Ответ лавочника\n\nНаша команда разработчиков вносила обновления в магазин трактирщика в Fantasy Quest, но возникла проблема! Диалог трактирщика пуст!\n\n## Задание\n\nДобавьте 2 отдельных оператора `print`, чтобы завершить ответ трактирщика. Они должны вывести в консоль следующее _в указанном порядке_:\n\n- `The Innkeeper: Ah! Great choices...`\n- `The Innkeeper: Is there anything else I can help you with?`",
    "translation-hash--9y1prc": "# Статистика игры\n\nМаркетинговая команда просит предоставить статистику по нашим серверам игры Fantasy Quest. Им нужно узнать среднее количество игроков на наших 4 серверах.\n\n## Задание\n\nОтладьте код, чтобы он корректно выводил решение математической задачи.\n\n> [!tip]\n> Синтаксис неверен. Почему числа воспринимаются как слова?\n\n## Подсказка\n\nСтроки заключаются в кавычки, но целые числа — нет!"
}