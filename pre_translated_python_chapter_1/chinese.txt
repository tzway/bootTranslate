{
    "translation-hash--7xn70o": "# 商店回应\n\n我们的开发团队一直在更新《幻想任务》中旅店老板的商店，但有个问题！旅店老板的对话是空白的！\n\n## 任务\n\n添加两条独立的 `print` 语句来完成旅店老板的回应。它们应按以下顺序输出到控制台：\n\n- `The Innkeeper: Ah! Great choices...`\n- `The Innkeeper: Is there anything else I can help you with?`",
    "translation-hash-d65fc8": "# 变量可变\n\n之所以叫“变量”，是因为它们可以保存任何值，并且这个值可以改变（即可变）。\n\n例如，以下代码会打印 `20`：\n\n```py\nacceleration = 10\nacceleration = 20\nprint(acceleration)\n```\n\n`acceleration = 20` 这一行把 `acceleration` 的值**重新赋值**为 20，**覆盖**了之前保存在变量中的值（这里是 10）。\n\n## 任务\n\n我们需要在英雄受到伤害时减少其生命值。\n\n在提供的代码中，每个 `print()` 函数之前，把 `player_health` 的值改为比原来少 100。\n\n最终输出应如下所示：\n\n```\n900\n800\n700\n600\n```",
    "translation-hash-k6q2yy": "# 存储结果\n\n既然我们已经学会了如何存储和修改变量的值，那就来做点数学运算吧！\n\n以下是一些常见数学运算符在 Python 语法中的示例。\n\n```py\nsummation = a + b  # 加法\ndifference = a - b # 减法\nproduct = a * b    # 乘法\nquotient = a / b   # 除法\n```\n\n可以使用括号来[规定运算顺序](https://www.mathsisfun.com/operation-order-pemdas.html)。\n\n```py\navg = (a + b + c) / 3\n```\n\n## 任务\n\n在第 4 行创建一个名为 `armored_health` 的新变量，并将其设置为 `player_health * armor_multiplier`",
    "translation-hash--oa2i4r": "# If-Else\n\n`if` 语句后面可以跟零个或多个 `elif`（“else if” 的缩写）语句，再后面可以跟零个或一个 `else` 语句。\n\n例如：\n\n```py\nif score > high_score:\n    print(\"High score beat!\")\nelif score > second_highest_score:\n    print(\"You got second place!\")\nelif score > third_highest_score:\n    print(\"You got third place!\")\nelse:\n    print(\"Better luck next time\")\n```\n\n首先计算 `if` 语句。如果结果为 `True`，则执行 `if` 语句的代码块，并忽略所有后续的 `elif` 和 `else`。\n\n如果第一个 `if` 为假，则计算下一个 `elif`。同样，如果它为 `True`，则执行其代码块并忽略其余部分。\n\n如果所有 `if` 或 `elif` 语句都不为 `True`，则仅执行最后的 `else` 语句的代码块。\n\n## 作业\n\n补全 `player_status` 函数。如果玩家的 `health` 小于或等于 `0`，`return` 字符串：\n\n```\ndead\n```\n\n否则，如果它小于或等于 `5`，`return` 字符串：\n\n```\ninjured\n```\n\n否则，`return` 字符串：\n\n```\nhealthy\n```",
    "translation-hash-pwuzty": "# 欢迎来到内存管理\n\n了解你的 _软件_ 如何在 _硬件_ 上运行，对于编写快速、高性能的代码至关重要。在本课程中，我们将深入探讨软件性能的核心之一：**内存管理**。\n\n![欢迎来到内存管理](https://storage.googleapis.com/qvault-webapp-dynamic-assets/lesson_videos/welcome-to-c.mp4)\n\n## 课程目标\n\n1. **理解程序如何在内存中存储数据**。变量、函数和对象都不是凭空存在的。当代码运行时，它们究竟“住”在哪里？\n2. **学会让程序更高效**。根据我的经验，后端软件中的大多数性能问题都与内存有关。了解其原理，才能排查并优化。\n3. **练习使用更低层级的语言编程**。C 比 Python、JavaScript 或 Go 更贴近硬件。通过写 C，你会学到软件在“贴近金属”层面是如何工作的。\n4. **了解垃圾回收（并亲手实现一个）**。你迟早会在带垃圾回收的语言里工作，无论是 Python、Go、JavaScript 还是其他语言。最好搞清楚其中的权衡。\n\n> [!info]\n> 这不是一门 C 语言课。我们会写 C 代码，也会覆盖你需要的 C 基础，但重点是内存，而不是 C。\n\n## 先决条件\n\n- **编程经验**：你应至少熟练掌握一门其他语言，如 Python、JavaScript 或 Go。\n- **计算机科学基础**：我们假设你已了解基本算法、数据结构、面向对象和函数式编程概念。\n\n## 构建 Sneklang\n\n如果你习惯使用超高阶语言，你可能早已“忘记”思考内存。在本课程中，我们将 **用 C 构建 “Sneklang” 编程语言**（其实只是其中一小部分）。我们将深入研究如何在 C 中手动管理内存，并在课程末尾实现一个简单的垃圾回收器，让 Sneklang 开发者无需太费脑筋。\n\n> [!teej]\n> 这里有个小讽刺：C 刚发布时曾被视作“高级”语言。事实上，在某些方面它现在仍是。现代编译器和硬件极其强大，能做出令人惊叹的优化。但即便如此，我相信在我们的 Sneklang 之旅中，我们仍能学到很多 :)\n\n## 作业\n\n终极罪行已发生——有人把 “Python” 和 “Sneklang” 搞混了。\n\n请将代码修改为打印：\n\n```\nStarting the Sneklang interpreter...\n```\n\n记得保留 `\\n` 换行符。",
    "translation-hash-5u8yaj": "# 高效学习\n\n本课程即将变得**更难**。没办法，如果编程像在公园散步一样简单，那人人都能拿六位数年薪当软件工程师了。但事实并非如此，要想不卡壳、不沮丧地成功，你得学会如何学习。\n\n## 解决困难编程问题的流程\n\n1. **先读课程！** 先弄懂示例，再开始写自己的代码。\n2. **阅读作业要求。** 动手写代码前，先搞清楚作业的目标。\n3. **开始写代码。**\n4. **插入 print() 语句。** 别等写了一大坨代码才开始测试。每写一点就插入 `print()` 语句，用 `Run` 按钮看看代码是否按预期运行。在小段代码里找问题，比在大段代码里容易得多。\n   - 持续运行、打印、修复，直到你确信代码正确。\n5. **提交代码。** 如果作业有单元测试，调试用的 `print()` 语句可以保留；如果作业检查的是控制台输出，提交前记得删掉这些 `print()` 语句。\n6. **把你的代码和讲师的对比。** 成功完成作业后，查看答案**不会**被扣分。\n\n## 额外小贴士\n\n- 在偷看答案前，先试试 Boots。Boots 很擅长给出精准提示，帮你独立解决问题。\n- 实在卡死时偶尔偷看答案没问题，但**别养成习惯**。如果你总是卡住，应该重启章节或课程，确保自己真正理解了内容。\n- 用“重置” `↶` 按钮可以恢复作业的初始代码。比如，你忘了哪些修改是你做的，哪些是讲师留下的。\n- 在设置页可以清空所有缓存代码。想重学某课程或章节时很有用。",
    "translation-hash-lrydzi": "# Python 中的错误与异常\n\n如果你已经学到课程的这个阶段，很可能已经在代码里遇到过一些错误。在 Python 中，主要可以区分出两类错误：\n\n- 语法错误  \n- 异常  \n\n## 语法错误\n\n你现在应该已经知道这是什么了。语法错误就是 Python 解释器告诉你：你的代码不符合 Python 语法规范。\n\n```py\nthis is not valid code, so it will error\n```\n\n如果我把它当成合法代码去运行，就会得到语法错误：\n\n```\nthis is not valid code, so it will error\n      ^\nSyntaxError: invalid syntax\n```\n\n## 异常\n\n即使语法正确，代码在真正执行时仍可能出错。执行过程中检测到的错误称为“异常”，你的代码可以优雅地处理它们。你甚至可以在代码里主动抛出异常。\n\nPython 使用 [try-except](https://docs.python.org/3/tutorial/errors.html#handling-exceptions) 模式来处理错误。\n\n```python\ntry:\n  10 / 0\nexcept Exception:\n  print(\"can't divide by zero\")\n```\n\n`try` 块会一直执行，直到抛出异常或执行完毕，以先发生者为准。这里因为除零不可能，所以抛出了异常。只有在 `try` 块抛出异常时，`except` 块才会被执行。\n\n如果想访问异常对象本身，可以使用如下语法：\n\n```python\ntry:\n  10 / 0\nexcept Exception as e:\n  print(e)\n\n# 输出 \"division by zero\"\n```\n\n用 `try/except` 包裹可能出错的代码，可以让程序优雅地处理异常，而不会崩溃。\n\n## 作业\n\n`get_player_record` 的某次调用会抛出 `player id not found` 异常。请修改 `main` 函数，把所有四次调用都放在一个 try-except 块里安全地执行。如果抛出异常，就打印该异常。",
    "translation-hash--if3ftz": "# 循环\n\n循环是程序员最好的朋友。循环让我们可以多次执行相同的操作，而无需每次都显式地写出来。\n\n例如，假设我想打印数字 0-9。\n\n我可以这样做：\n\n```py\nprint(0)\nprint(1)\nprint(2)\nprint(3)\nprint(4)\nprint(5)\nprint(6)\nprint(7)\nprint(8)\nprint(9)\n```\n\n即便如此，使用 _循环_ 会节省大量打字时间。特别是当我想要做同样的事情 _一千次_ 或 _一百万次_ 时。\n\nPython 中的 _“for 循环”_ 写法如下：\n\n```py\nfor i in range(0, 10):\n    print(i)\n```\n\n`i` 依次替换数字 `0` 到 `9`。用中文描述这段代码：\n\n1. 从 `i` 等于 `0` 开始。（`i in range(0)`）\n2. 如果 `i` 不小于 10（`range(0, 10)`），则退出循环。否则：\n   - 将 `i` 打印到控制台。（`print(i)`）\n   - 给 `i` 加 `1`。（`range` 默认每次递增 1）\n   - 回到步骤 `2`。\n\n结果是数字 `0-9` 按顺序被打印到控制台。\n\n> [!info]\n> `range(a, b)` 中的数字 `a`、`b` 对 `a` 是 _包含_ 的，对 `b` 是 _不包含_ 的。\n> 因此 `range(0, 10)` 包含 `0` 但不包含 `10`。\n\n## Python 中缩进很重要！\n\nfor 循环的循环体 _必须_ 缩进，否则会报语法错误。\n\n## 作业\n\n补全 `print_numbers` 函数中缺失的 for 循环部分，使其将数字 0-99 打印到控制台。",
    "translation-hash-fxcrc2": "{\"Question\":\"在你已经成功完成一项作业后，如果再去偷看答案，你将会被扣分。\",\"Answers\":[\"正确\",\"错误\"],\"Answer\":\"错误\",\"ContainsCompleteDir\":false}",
    "正确": "True",
    "错误": "False",
    "translation-hash-4j80y": "# 函数\n\n函数让我们能够**复用**并**组织**代码。例如，假设我们有一段计算圆面积的代码：\n\n```py\nradius = 5\narea = 3.14 * radius * radius\n```\n\n这能正常工作！但问题是，当我们想计算**其他**圆的面积时，每个圆都有自己的半径。我们**可以**直接复制代码并修改变量名，就像这样：\n\n```py\nradius = 5\narea1 = 3.14 * radius * radius\n\nradius2 = 7\narea2 = 3.14 * radius2 * radius2\n```\n\n但我们想**复用**代码！为什么要重复劳动？如果我们想计算成千上万个圆的面积呢？？？**这就是函数的用武之地。**\n\n我们可以用 `def` 关键字定义一个名为 `area_of_circle` 的新函数。\n\n```py\ndef area_of_circle(r):\n    pi = 3.14\n    result = pi * r * r\n    return result\n```\n\n让我们分解一下这个 `area_of_circle` 函数：\n\n- 它接收一个输入（也叫“参数”或“实参”）名为 `r`\n- 函数体缩进——每次我们使用（即“调用”）函数时都会运行这段代码\n- 它 `return` 一个值（函数的输出）。在这个例子中，就是存储在 `result` 变量里的值\n\n要[“调用”](https://en.wikibooks.org/wiki/Python_Programming/Functions#Function_Calls)这个函数（程序员行话，就是“使用这个函数”），我们可以把任意数字作为实参（这里用 `5`）传给形参 `r`，并把输出捕获到一个新变量里：\n\n```py\narea = area_of_circle(5)\nprint(area)\n# 78.5\n```\n\n1. `5` 作为输入 `r` 传入\n2. 函数体运行，把 `78.5` 存进 `result` 变量\n3. 函数返回 `78.5`，这意味着表达式 `area_of_circle(5)` 的值就是 `78.5`\n4. `78.5` 被存进 `area` 变量并打印出来\n\n因为我们已经**定义**了函数，现在想用它多少次都行，还能传不同的输入！\n\n```py\narea = area_of_circle(6)\nprint(area)\n# 113.04\n\narea = area_of_circle(7)\nprint(area)\n# 153.86\n```\n\n## 作业\n\n我们需要计算武器的“攻击范围”。例如，一把 `1.0` 米长的剑，玩家可以在周围 `3.14` 平方米的圆形区域内攻击。你可以用 `area_of_circle` 函数来完成这个计算。\n\n修复第 13 行的 bug：用 `spear_length` 作为输入调用 `area_of_circle` 函数，并把结果存进 `spear_area` 变量。",
    "translation-hash-fkezp6": "# 欢迎来到学习 Python\n\n![Python 编程语言](https://storage.googleapis.com/qvault-webapp-dynamic-assets/course_assets/UbgRs9O-800x200.png)\n\n## 让我们构建一款游戏\n\n在本课程中，你将为一个名为《幻想任务》的文本 RPG 添加功能。\n\n## 作业\n\n<!-- prettier-ignore-start -->\n> [!mobile]\n> _你正在使用移动设备（真糟糕），因此需要点击上方的 `lesson/code` 切换按钮，在课程和代码之间来回切换_。\n<!-- prettier-ignore-end -->\n\n1. 点击灰色 `▶ 运行` 按钮，运行我为你写好的代码  \n2. 点击金色 `▶ 提交` 按钮，运行并提交你的代码  \n\n> [!desktop]\n> 点击屏幕右上角的 `-->` 右箭头，进入下一课。",
    "translation-hash-teitrb": "# 修复你的第一个 Bug\n\n《Fantasy Quest》的战斗系统没有按预期工作！看起来玩家在受到攻击时生命值在 _增加_，而不是 _减少_。\n\n## 任务\n\n修复第 3 行的数学错误。",
    "translation-hash--w9yog2": "# 控制台\n\n“控制台”会显示你程序的文本输出，它就在代码编辑器的下方。\n\n为了查看代码中发生了什么，我们需要**把内容打印到控制台**，方法是使用 `print()` 函数。\n\n稍后我们会深入学习函数，现在只需知道 `print()` 函数会把括号里的任何内容打印出来，像这样：\n\n```python\nprint(\"Greetings, adventurer!\")\n```\n\n## 任务\n\n我们要告诉新玩家如何移动！**把下面的文本**打印到控制台：\n\n```\nPlease move forward\n```",
    "translation-hash--9y1prc": "# 游戏统计\n\n市场团队想了解我们《幻想探险》游戏服务器的一些数据。他们想知道 4 台服务器的平均玩家数。\n\n## 作业\n\n调试代码，使其正确输出这道数学题的结果。\n\n> [!tip]\n> 语法有误。为什么把数字当成文字处理了？\n\n## 提示\n\n字符串有引号，整数没有！",
    "translation-hash-syzull": "# 多条指令\n\n代码按顺序执行，从程序的顶部开始。例如：\n\n```py\nprint(\"this prints first\")\nprint(\"this prints second\")\nprint(\"this prints last\")\n```\n\n每条 `print()` 指令都会在新的一行输出。\n\n## 任务\n\n我们游戏中的对话应该按正确顺序显示！在第一关，我们的英雄遇到了一只会说话的猫头鹰，名叫 Jax。\n\n1. [ ] _运行_（不是提交）代码，看看它打印的顺序是错误的\n2. [ ] 重新排列代码，使其按以下（正确的）顺序打印：\n\n```\nJax: B-Kaw!\nHero: ...\nJax: Where are you off to this morning? Bkaw...\nHero: Where did an owl learn to speak??\n```",
    "translation-hash--yyou3c": "# 语法错误\n\n[\"语法\"](<https://en.wikipedia.org/wiki/Syntax_(programming_languages)>) 是行话，指“计算机能够理解的合法代码”。例如，下面的代码就有**无效**语法：\n\n```py\nprint(\"hello world')\n```\n\n字符串 `hello world` 两边的引号不匹配：一边是单引号 `'` ，另一边是双引号 `\"`。\n\n## 任务\n\n让我们继续在 Fantasy Quest 上的工作。游戏里出现了一个 bug，玩家们**非常沮丧**。\n\n> [!lane]\n> 他们真难伺候……我们又没加微交易……\n\n代码本应向用户输出 `Welcome to Fantasy Quest!`，但他们却收到了错误。**在代码编辑器中找到语法错误并修复它**。",
    "translation-hash-rlshls": "# 什么是 Python？\n\n![为什么学习 Python](https://storage.googleapis.com/qvault-webapp-dynamic-assets/lesson_videos/why-learn-python-45454.mp4)\n\n数十万学生正是从这里，用 [Python](https://www.python.org/) 开启他们的编程之旅。\n\n> [!lane]\n> Python 并不 _必须_ 是你的第一门语言，但 _我_ 认为它对大多数开发者来说是最佳的入门语言。它不会成为你的阻碍，让你可以专注于学习核心的编程概念。\n\n然而，简单并不意味着没用！Python 在业界 [_极其_ 流行](https://survey.stackoverflow.co/2024/technology)，并以以下领域闻名：\n\n- 后端 Web 服务器\n- DevOps 与云工程\n- 机器学习\n- 脚本与自动化\n- 等等……\n\n另一方面，它 _并不_ 以 **前端开发** 或图形用户界面著称。虽然 _可以_ 做，但并不常见。",
    "translation-hash-yhtx20": "# 什么是“代码”？\n\n代码就是一系列让计算机依次执行的指令。程序可以包含**大量**的指令。\n\n> [!lane]\n> 在我写下这段话时，Boot.dev 后端共有 46,119 行代码……但比起我参与过的其他项目，这已经算小的了。\n\n还记得我们用 `print()` 指令把文字输出到控制台吗？我们也可以用它来输出数字。下面这行代码会输出数字 `42`：\n\n```py\nprint(42)\n```\n\n[加法](https://en.wikipedia.org/wiki/Addition) 是编程中最常用的指令之一。下面这行代码**同样**会输出数字 `42`：\n\n```py\nprint(40 + 2)\n```\n\n它会先计算括号里的和，**然后**再输出结果。\n\n## 任务\n\n在游戏开发中，简单的加法**随处可见**。在《Fantasy Quest》里，我们希望武器在附魔后能造成额外伤害。\n\n我们的英雄之剑平时造成 `250` 点伤害，但在附魔状态下应**额外**造成 `75` 点伤害。\n\n**计算并输出 `250 + 75` 的结果**",
    "translation-hash-nl3lkh": "# 语法错误小测验\n\n**语法**：规定一门语言中[表达式](<https://en.wikipedia.org/wiki/Expression_(computer_science)>)和[语句](<https://en.wikipedia.org/wiki/Statement_(computer_science)>)应如何构造的规则。例如，在 Python 中，以下写法是**正确**的语法：\n\n```py\nprint(\"hello world\")\n```\n\n而在另一种编程语言（如 Go）中，正确的语法则是：\n\n```go\nfmt.Println(\"hello world\")\n```\n\n语法错误并不是你在编程时可能遇到的唯一问题，例如：\n\n- **逻辑错误**。你的代码**有效**，也能**运行**，但结果出乎意料。\n- **运行太慢**。你的代码**有效**，也**完成了预期功能**，但速度不理想。\n\n_在本课程中，我们只关注语法错误和逻辑错误。性能问题将在后续课程中讨论_。",
    "translation-hash--p9t0tz": "{\"Question\":\"Python 实际上不常用于什么？\",\"Answers\":[\"机器学习\",\"前端应用\",\"后端服务器\",\"自动化脚本\"],\"Answer\":\"前端应用\",\"ContainsCompleteDir\":false}",
    "机器学习": "Machine learning",
    "前端应用": "Frontend apps",
    "后端服务器": "Backend servers",
    "自动化脚本": "Automation scripts",
    "translation-hash-yombne": "{\"Question\":\"Python 以……而闻名\",\"Answers\":[\"易于读写\",\"难以读写\"],\"Answer\":\"易于读写\",\"ContainsCompleteDir\":false}",
    "易于读写": "simple to read and write",
    "难以读写": "complex to read and write",
    "translation-hash--gqd3yv": "{\"Question\":\"syntax 是什么意思？\",\"Answers\":[\"编程语言中有效代码的规则\",\"快速的代码\",\"能够产生正确输出的代码\",\"浏览器中的代码\"],\"Answer\":\"编程语言中有效代码的规则\",\"ContainsCompleteDir\":false}",
    "编程语言中有效代码的规则": "The rules for valid code in a programming language",
    "快速的代码": "Fast code",
    "能够产生正确输出的代码": "Code that produces the correct output",
    "浏览器中的代码": "Code in the browser",
    "translation-hash--7rzgq2": "# 课程失败\n\n你可能已经注意到，你有一个 `提交` 按钮 _和_ 一个 `运行` 按钮。\n\n- **运行**：用于测试和调试。运行代码不会受到任何惩罚。\n- **提交**：会运行你的代码，同时还会把输出与我们的标准答案进行比对。如果输出不匹配，你将受到 _惩罚_。\n\n> [!lane]\n> 专业提示：你不会把未经测试的代码部署给最终用户……对吧？所以也不要在没有运行的情况下就提交！这个机制的设计初衷是鼓励良好的现实开发习惯。“提交”就像把代码部署到生产环境。\n\n## 惩罚是什么？\n\n当你课程失败时，会发生以下两种情况之一：\n\n- **如果你有 [护甲](?modal=info-sharpshooter)**，你会失去一个。该护甲会被消耗，用来保护你在这节课上免受未来的失败。\n- **如果你没有护甲**，你会失去你的 [神枪手连胜](?modal=info-sharpshooter)，并重置为零。每当连胜计数达到 15 时，你将获得一个随机宝箱。宝箱里包含宝石和物品（如护甲）。\n\n## 任务\n\nFantasy Quest 的服务器代码里有一个 bug。这段代码本应打印出游戏服务器成功启动的消息。\n\n**修复代码中的两个语法错误**。",
    "translation-hash--b4wvq": "{\"Question\":\"如果你尝试运行语法无效的代码会发生什么？\",\"Answers\":[\"你的网络连接会断开\",\"你的梦想会枯萎，连同你最后的希望与抱负一起消逝\",\"你会收到来自 Python 解释器的错误信息，且代码不会被执行\",\"计算机会死机\"],\"Answer\":\"你会收到来自 Python 解释器的错误信息，且代码不会被执行\",\"ContainsCompleteDir\":false}",
    "你的网络连接会断开": "Your network connection will drop",
    "你的梦想会枯萎，连同你最后的希望与抱负一起消逝": "Your dreams will wither and die, alongside your last few hopes and aspirations",
    "你会收到来自 Python 解释器的错误信息，且代码不会被执行": "You'll get an error message from the Python interpreter and the code won't execute",
    "计算机会死机": "The computer will freeze"
}