{
    "translation-hash-fkezp6": "# Pythonを学ぼうへようこそ\n\n![Python programming language](https://storage.googleapis.com/qvault-webapp-dynamic-assets/course_assets/UbgRs9O-800x200.png)\n\n## ゲームを作ってみよう\n\nこのコースでは、テキストベースのRPG「Fantasy Quest」の機能を作っていきます。\n\n## 課題\n\n<!-- prettier-ignore-start -->\n> [!mobile]\n> _モバイル（うわっ）で閲覧していますね。レッスンとコードを切り替えるには、上の `lesson/code` トグルを使ってください_。\n<!-- prettier-ignore-end -->\n\n1. グレーの `▶ Run` ボタンを押して、私が書いたコードを実行してください\n2. 金色の `▶ Submit` ボタンを押して、コードを実行 _して提出_ してください\n\n> [!desktop]\n> 画面右上の `-->` 右矢印を押して次のレッスンへ進んでください。",
    "translation-hash--7xn70o": "# ショップの返答\n\n私たちの開発チームは Fantasy Quest の宿屋店主ショップを更新してきましたが、問題が発生しています！宿屋店主のセリフが空白になっています！\n\n## 課題\n\n宿屋店主の返答を完成させるために、2 つの別々の `print` 文を追加してください。それらはコンソールに次のように出力される必要があります（この順番で）：\n\n- `The Innkeeper: Ah! Great choices...`\n- `The Innkeeper: Is there anything else I can help you with?`",
    "translation-hash--9y1prc": "# ゲーム統計\n\nマーケティングチームが、Fantasy Quest ゲームサーバーに関する統計情報を求めています。4 台のサーバー全体での平均プレイヤー数を知りたいそうです。\n\n## 課題\n\nコードをデバッグして、数学の問題に対する正しい答えを出力してください。\n\n> [!tip]\n> 構文が間違っています。なぜ数字が文字列として扱われているのでしょうか？\n\n## ヒント\n\n文字列は引用符で囲みますが、整数は囲みません！",
    "translation-hash-syzull": "# 複数の命令\n\nコードはプログラムの一番上から順番に実行されます。例：\n\n```py\nprint(\"これが最初に表示される\")\nprint(\"これが次に表示される\")\nprint(\"これが最後に表示される\")\n```\n\nそれぞれの `print()` は新しい行に出力されます。\n\n## 課題\n\nゲーム内のセリフは正しい順番で表示される必要があります！最初のレベルでは、主人公は話すフクロウのジャックスと出会います。\n\n1. [ ] コードを _実行_（提出ではない）して、順番がおかしいことを確認してください\n2. [ ] コードを並び替えて、以下の（正しい）順番で表示されるようにしてください：\n\n```\nJax: B-Kaw!\nHero: ...\nJax: Where are you off to this morning? Bkaw...\nHero: Where did an owl learn to speak??\n```",
    "translation-hash--yyou3c": "# 構文エラー\n\n「構文」(syntax) は「コンピューターが理解できる正しいコード」の業界用語です。たとえば、次のコードは _無効_ な構文です：\n\n```py\nprint(\"hello world')\n```\n\n文字列 `hello world` を囲む引用符が一致していません。片方はシングルクォート `'` で、もう片方はダブルクォート `\"` です。\n\n## 課題\n\nFantasy Quest の開発を続けましょう。ゲームにバグがあり、プレイヤーは _動揺_ しています。\n\n> [!lane]\n> 本当にわがままだな……マイクロトランザクションを追加したわけでもないのに……\n\nコードはユーザーに `Welcome to Fantasy Quest!` と表示するはずでしたが、代わりにエラーが表示されます。**コードエディタ内の構文エラーを見つけて修正してください**。",
    "translation-hash-rlshls": "# Python とは？\n\n![why learn python](https://storage.googleapis.com/qvault-webapp-dynamic-assets/lesson_videos/why-learn-python-45454.mp4)\n\n何十万もの学生が [Python](https://www.python.org/) からコーディングの旅を始めています。\n\n> [!lane]\n> Python が必ずしも最初の言語である必要はありませんが、_私_ はほとんどの開発者にとって最良の第一言語だと考えています。Python は邪魔にならず、基本的なプログラミング概念の学習に集中できます。\n\nしかし、Python がシンプルだからといって役に立たないわけではありません！ Python は業界で[_非常に_人気](https://survey.stackoverflow.co/2024/technology)のある言語であり、次のような用途で知られています。\n\n- バックエンド Web サーバー\n- DevOps とクラウドエンジニアリング\n- 機械学習\n- スクリプティングと自動化\n- など…\n\n一方で、**フロントエンド開発**やグラフィカルユーザーインターフェースではあまり知られていません。_可能_ではありますが、一般的ではありません。",
    "translation-hash-nl3lkh": "# 構文エラークイズ\n\n**構文（Syntax）**：[式](<https://en.wikipedia.org/wiki/Expression_(computer_science)>)や[文](<https://en.wikipedia.org/wiki/Statement_(computer_science)>)が言語内でどのように構造化されるべきかを定めるルール。たとえば Python では、以下は _正しい_ 構文です：\n\n```py\nprint(\"hello world\")\n```\n\n一方、別のプログラミング言語（Go など）では、正しい構文は次のようになります：\n\n```go\nfmt.Println(\"hello world\")\n```\n\n構文エラーはコーディング中に遭遇する唯一の問題ではありません。たとえば：\n\n- **ロジックのバグ**。コードは _有効_ で、_実行_ できますが、予期しない動作をします。\n- **速度が遅い**。コードは _有効_ で、_期待通りの動作_ をしますが、それをゆっくりと実行します。\n\n_このコースでは、構文エラーとロジックエラーにのみ焦点を当てます。パフォーマンスの問題は後のコースで扱います_。",
    "translation-hash-yombne": "{\"Question\":\"Pythonは、読み書きが...\",\"Answers\":[\"シンプルである\",\"複雑である\"],\"Answer\":\"シンプルである\",\"ContainsCompleteDir\":false}",
    "シンプルである": "simple to read and write",
    "複雑である": "complex to read and write",
    "translation-hash-yhtx20": "# 「コード」とは何か？\n\nコードとは、コンピューターが順番に実行する一連の命令のことです。プログラムには**たくさん**の命令が含まれることがあります。\n\n> [!lane]\n> この記事を書いている時点で、Boot.dev のバックエンドには 46,119 行のコードがあります……。しかし、これは私が関わった他のプロジェクトと比べてもずっと小さい部類です。\n\n`print()` 命令を使ってコンソールにテキストを出力したのを覚えていますか？ この命令を使って数値を出力することもできます。次のコードは数値 `42` を出力します：\n\n```py\nprint(42)\n```\n\nさて、[足し算](https://ja.wikipedia.org/wiki/加法)はプログラミングで最もよく使われる命令のひとつです。次のコードも数値 `42` を出力します：\n\n```py\nprint(40 + 2)\n```\n\nこのコードは括弧内の和を先に計算し、**その後**結果を出力します。\n\n## 課題\n\n単純な足し算はゲーム開発でも**頻繁に**使われます。Fantasy Quest では、武器にエンチャントがかかっているときに追加ダメージを与えたいと考えています。\n\n勇者の剣は通常 `250` のダメージを与えますが、エンチャントがかかっているときは**追加で** `75` のダメージを与える必要があります。\n\n**`250 + 75` の結果を計算して出力してください**",
    "translation-hash--gqd3yv": "{\"Question\":\"構文（syntax）とは何を意味しますか？\",\"Answers\":[\"プログラミング言語における有効なコードのルール\",\"高速なコード\",\"正しい出力を生成するコード\",\"ブラウザ内のコード\"],\"Answer\":\"プログラミング言語における有効なコードのルール\",\"ContainsCompleteDir\":false}",
    "プログラミング言語における有効なコードのルール": "The rules for valid code in a programming language",
    "高速なコード": "Fast code",
    "正しい出力を生成するコード": "Code that produces the correct output",
    "ブラウザ内のコード": "Code in the browser",
    "translation-hash--b4wvq": "{\"Question\":\"無効な構文のコードを実行しようとするとどうなりますか？\",\"Answers\":[\"ネットワーク接続が切断されます\",\"あなたの夢と最後の希望が共に萎んでしまいます\",\"Pythonインタープリタからエラーメッセージが表示され、コードは実行されません\",\"コンピュータがフリーズします\"],\"Answer\":\"Pythonインタープリタからエラーメッセージが表示され、コードは実行されません\",\"ContainsCompleteDir\":false}",
    "ネットワーク接続が切断されます": "Your network connection will drop",
    "あなたの夢と最後の希望が共に萎んでしまいます": "Your dreams will wither and die, alongside your last few hopes and aspirations",
    "Pythonインタープリタからエラーメッセージが表示され、コードは実行されません": "You'll get an error message from the Python interpreter and the code won't execute",
    "コンピュータがフリーズします": "The computer will freeze",
    "translation-hash--7rzgq2": "# レッスン失敗\n\nおそらく、`Submit`ボタン**と**`Run`ボタンの両方があることに気づいたはずです。\n\n- **Run**：テストとデバッグ用です。コードを実行してもペナルティはありません。\n- **Submit**：コードを実行し、出力を私たちの答えと照合します。出力が一致しない場合、**罰を受けます**。\n\n> [!lane]\n> プロのヒント：エンドユーザーにコードをデプロイする前にテストしない...ということはないですよね？それでは、実行せずにコードを提出しないでください！このゲームメカニックの目的は、良い実世界のコーディングプラクティスを奨励することです。「Submit」は本番環境へのデプロイのようなものです。\n\n## ペナルティとは？\n\nレッスンに失敗すると、次のいずれかが起こります：\n\n- **[アーマー](?modal=info-sharpshooter)を持っている場合**、1つ失います。そのアーマーは、そのレッスンでの今後の失敗からあなたを守るために消費されます。\n- **アーマーを持っていない場合**、[sharpshooter spree](?modal=info-sharpshooter)を失い、ゼロにリセットされます。spreeカウンターが15に達するたびに、ランダムなチェストを獲得します。チェストにはジェムやアイテム（アーマーのような）が含まれています。\n\n## 課題\n\nFantasy Questのサーバーコードにバグがあります。このコードは、ゲームサーバーが正常に起動したことを示すメッセージを出力するはずです。\n\n**コード内の構文エラーを2つとも修正してください**。",
    "translation-hash--p9t0tz": "{\"Question\":\"Pythonは実際にはあまり使われていない用途はどれか？\",\"Answers\":[\"機械学習\",\"フロントエンドアプリケーション\",\"バックエンドサーバー\",\"自動化スクリプト\"],\"Answer\":\"フロントエンドアプリケーション\",\"ContainsCompleteDir\":false}",
    "機械学習": "Machine learning",
    "フロントエンドアプリケーション": "Frontend apps",
    "バックエンドサーバー": "Backend servers",
    "自動化スクリプト": "Automation scripts",
    "translation-hash--w9yog2": "# コンソール\n\n「コンソール」はプログラムのテキスト出力を表示する場所です。コードエディタのすぐ下にあります。\n\nコードで何が起きているかを確認するには、`print()` 関数を使って**コンソールに出力する**必要があります。\n\n関数については後ほど詳しく学びますが、今は `print()` 関数は括弧の中に入れたものを何でも出力してくれることを覚えておいてください。例えば次のようになります：\n\n```python\nprint(\"Greetings, adventurer!\")\n```\n\n## 課題\n\n新しいプレイヤーに移動方法を伝える必要があります！次のテキストを**コンソールに出力してください**：\n\n```\nPlease move forward\n```",
    "translation-hash-teitrb": "# 最初のバグを修正しよう\n\nFantasy Quest の戦闘システムが意図した通りに動いていません！  \nプレイヤーが攻撃を受けたときに体力が**減る**はずなのに、**増えて**しまっているようです。\n\n## 課題\n\n3 行目の計算ミスを修正してください。",
    "translation-hash-d65fc8": "# 変数は変わる\n\n変数は「variable（変わり得るもの）」と呼ばれるのは、どんな値でも保持でき、その値が変化し得る（＝変動する）からです。\n\nたとえば、次のコードは `20` を出力します。\n\n```py\nacceleration = 10\nacceleration = 20\nprint(acceleration)\n```\n\n`acceleration = 20` という行は、`acceleration` の値を 20 に _再代入_ しています。これにより、`acceleration` 変数に以前保持されていた値（この場合は 10）が _上書き_ されます。\n\n## 課題\n\nヒーローがダメージを受けるたびに体力を減らす必要があります。\n\n提供されたコードの各 `print()` の直前で、`player_health` の値を以前の値から 100 減らしてください。\n\n最終的な出力は次のようになります。\n\n```\n900\n800\n700\n600\n```",
    "translation-hash-jbosst": "# 変数\n\n[変数](https://www.cs.utah.edu/~germain/PPS/Topics/variables.html)は、プログラムの実行中にデータを**保存**するための仕組みです。これまでは、データを[`print()`](https://docs.python.org/3/library/functions.html#print)に直接渡して**出力**してきました。これからは、データを変数に**保存**して、出力する**前**に再利用したり変更したりできるようにします。\n\n## 変数の作成\n\n「変数」とは、値に付ける名前のことです。たとえば、`my_height`という新しい変数を作り、その値を`100`に設定できます：\n\n```py\nmy_height = 100\n```\n\nまたは、`my_name`という変数を定義して、テキスト文字列`\"Lane\"`を設定することもできます：\n\n```py\nmy_name = \"Lane\"\n```\n\n変数の名前は自由に選べますが、**説明的**で、単一の[\"トークン\"](https://en.wikipedia.org/wiki/Lexical_analysis#Token)（単語をアンダースコアで区切った連続したテキスト）である必要があります。\n\n## 変数の使用\n\n変数を作成したら、その名前を使って値にアクセスできます。たとえば、これは`100`を出力します：\n\n```py\nprint(my_height)\n```\n\nそして、これは`Lane`を出力します：\n\n```py\nprint(my_name)\n```\n\n## 課題\n\nヒーローの体力を追跡する必要があります！\n\nコードの最初の行で、`player_health`という新しい変数を作成し、それを`1000`に設定してください。"
}